/**
 * @defaults:
 */
$remBase: 16px;

/**
 * @prop:
 * @return: value without unit of measure
 */
@function stripUnit($num) {
  @return $num / ($num * 0 + 1);
}

/**
 * @prop:
 * @return: value in rems
 */
@function convertToRem($value, $baseValue: $remBase)  {
  $value: stripUnit($value) / stripUnit($baseValue) * 1rem;
  @if ($value == 0rem) { $value: 0; } // Turn 0rem into 0
  @return $value;
}

// New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
// Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported
// rem-calc(10 20 30px 40);
// Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets
// rem-calc((10, 20, 30, 40px));
// Optionally call with a different base (eg: 8px) to calculate rem.
// rem-calc(16px 32px 48px, 8px);
// If you require to comma separate your list
// rem-calc((16px, 32px, 48), 8px);

@function calculateRem($values, $baseValue: $remBase) {
  $max: length($values);

  @if $max == 1 { @return convertToRem(nth($values, 1), $baseValue); }

  $remValues: ();
  @for $i from 1 through $max {
    $remValues: append($remValues, convertToRem(nth($values, $i), $baseValue));
  }
  @return $remValues;
}

